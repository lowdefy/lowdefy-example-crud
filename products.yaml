# On this page, we will handle both the edit and create product actions on the same page.

# We will create separate forms for the new product and edit product forms. This is simpler
# than sharing the form. Sometimes additional actions and conditional logic are needed to manage
# these shared forms.

# To simplify the state on the page context, we will give ids that look like new_product.{fieldName}
# and edit_product.{fieldName} to the input components. This will create separate objects in
# the page state, that will make managing them easier. We also set the response value of the
# all_products request to the product_list field in state because our product_list List block
# will render the blocks defined under product_list for all the array items in the product_list
# state variable.

id: products
type: PageSiderMenu
properties:
  title: Products
# All the requests are placed on the page object, so they are all together.
# In the brands example, the requests were placed on the block that used them, so they are close
# to where they are used. Both approaches can be used, but it is best to be consistent throughout an app.
requests:
  # MongoDb Aggregation to get the product data.
  - id: all_products
    type: MongoDBAggregation
    connectionId: products # Id of the connection defined in the lowdefy.yaml file.
    properties:
      pipeline: # Here we can simply provide any valid MongoDB aggregation pipeline, like do a very basic sort.
        - $sort:
            name: 1 # Sort alphabetically according to the name
  # MongoDb Aggregation to get a list of the brands and their _ids to be used by a brand dropdown selector.
  - id: brands_selector
    type: MongoDBAggregation
    connectionId: brands # Id of the connection defined in the lowdefy.yaml file.
    properties:
      pipeline:
        - $project: # Project the correct fields that the dropdown selector expects: a list of value-label pairs
            _id: 0
            label: $name # This is what the user will see in the dropdown
            value: $_id # This is the value of the option selected in the dropdown
        - $sort:
            label: 1 # Sort the list alphabetically according to the label
  - id: insert_product
    type: MongoDBInsertOne # MongoDb insertOne request to write a new product into the collection
    connectionId: products
    payload:
      new_product:
        _state: new_product
    properties:
      doc:
        name:
          _payload: new_product.name
        brand_id:
          _payload: new_product.brand_id
        description:
          _payload: new_product.description
        created_at:
          _date: now # Set created_at and updated_at dates as current time
        updated_at:
          _date: now
  - id: update_product
    type: MongoDBUpdateOne # MongoDb updateOne request to update the selected product
    connectionId: products
    payload:
      edit_product:
        _state: edit_product
    properties:
      filter:
        _id:
          _payload: edit_product._id # Filter the document that matches the selected document's _id (which is nested in the edit_product object)
      update:
        $set:
          name:
            _payload: edit_product.name
          brand_id:
            _payload: edit_product.brand_id
          description:
            _payload: edit_product.description
          updated_at:
            _date: now
  - id: delete_product
    type: MongoDBDeleteOne # MongoDb deleteOne request to delete the selected product's document from the collection
    connectionId: products
    payload:
      _id:
        _state: edit_product._id
    properties:
      filter:
        _id:
          _payload: _id # Filter the document that matches the selected document's _id

events:
  # onMount is fired every time a user visits the page and will keep the page in a loading state
  # until all the actions is this list has completed execution.
  onMount:
    # Fetch the all_products request every time when a user enters the page.
    - id: fetch_products
      type: Request
      params: all_products
    # The all_products request data is set to product_list in the page context state.
    # This is done so that the List block can render all items in the product_list array.
    - id: set_products
      type: SetState
      params:
        product_list:
          _request: all_products
  # onMountAsync is fired every time a user visits the page, however, unlike onMount the
  # onMountAsync action will not keep the page state in loading while waiting for the list
  # of actions to complete execution, it will allow the app to continue to render the page
  # while completing these actions in the background. This is a nice when fetching data
  # which is non-blocking or does not immediately need to be displayed on the page.
  onMountAsync:
    # Fetch the brands_selector lookup request when we enter the page.
    # This will ensure that we fetch newly added brands. If this is not
    # done, the brands_selector request will only be fetched the first time
    # the page is loaded, and if a user adds new brands on the brands page,
    # these brands will not be updated in the dropdown.
    - id: fetch_brands
      type: Request
      params: brands_selector

areas:
  header:
    blocks:
      - _ref: view_github.yaml
  content:
    blocks:
      - id: title # Create a Title block
        type: Title
        layout:
          grow: 1 # Use the same layout for the title as the brands page.
        properties:
          content: Products # The title's text
      - id: new_product_button # Create a Button block for adding a new product
        type: Button
        # The grow 1 and 0 option here will render these to blocks in the same
        # css flex row, in simple terms, the button will be next to the title,
        # and will shrink to only the size of the button content, freeing all the
        # extra space for the title.
        layout:
          grow: 0
        properties:
          title: New Product
          icon: AiOutlinePlus
        events:
          onClick:
            - id: open_new_drawer # Open the drawer which contains the input fields to add a new product
              type: CallMethod
              params:
                blockId: new_product_drawer # The block id of the drawer which must be opened as the button is clicked.
                method: toggleOpen # The method that opens the drawer.

      - id: product_list # A List block to render the following blocks for all items in the product_list page state variable.
        type: List
        blocks:
          - id: product_list.$.container # Wrap all the blocks for a brand item in a box.
            type: Box
            style:
              background: '#fff' # Give the box a white background and some spacing.
              margin: 10
              padding: 10
            blocks:
              - id: product_list.$.name # Show the item name as a title in the list.
                type: Title
                properties:
                  content:
                    _state: product_list.$.name
                  level: 3
              - id: product_list.$.description # Show the item description as a paragraph in the list.
                type: Paragraph
                properties:
                  content:
                    _state: product_list.$.description
            events:
              onClick:
                # Set the edit_product object in state to the selected item.
                # Since the item has the same datafields (_id, name, description and brand_id), these fields are populated
                # in the edit_product input fields as the drawer is opened.
                - id: set_edit_product
                  type: SetState
                  params:
                    edit_product:
                      _state: product_list.$
                - id: open_edit_drawer # Open the drawer which contains the input fields to edit the selected product.
                  type: CallMethod
                  params:
                    blockId: edit_product_drawer
                    method: toggleOpen

      # Add a Drawer to the page to group all the new_product fields.
      - id: new_product_drawer
        type: Drawer
        properties:
          title: New Product
          width: 512 # Set the width of the drawer to be 512px.
        layout:
          contentGutter: 16 # Set a gutter of 16px between all the blocks in the drawer.
        blocks:
          - id: new_product.name # A text input block to capture the new product name.
            type: TextInput
            properties:
              title: Name
              placeholder: Product Name # Text to display inside the input box when nothing has been entered yet.
          - id: new_product.brand_id # A dropdown selector to select the brand_id of the brand to which this product belongs to.
            type: Selector
            properties:
              title: Brand
              placeholder: Select brand
              options:
                _request: brands_selector # Populate the options of the dropdown using the brands_selector request response.
          - id: new_product.description
            type: TextArea # A multi-line text box block to capture the new product description
            properties:
              title: Description
              placeholder: Product Description
          - id: insert_product
            type: Button
            properties:
              title: Save
              icon: AiOutlineSave
              block: true # Makes the button fill the maximum defined width instead of only the with of its contents (title and icon).
            events:
              onClick:
                - id: insert_product # Call the insert_product request.
                  type: Request
                  params: insert_product
                - id: fetch_all_products # Refresh the all_products request to get the newly created product.
                  type: Request
                  params: all_products
                - id: set_products # Update the product_list array in state with the all_products request response.
                  type: SetState
                  params:
                    product_list:
                      _request: all_products
                - id: close_new_drawer # Close the new_product drawer.
                  type: CallMethod
                  params:
                    blockId: new_product_drawer
                    method: toggleOpen # The method that closes the drawer
        # When the new product drawer closes.
        events:
          onClose:
            # Clear the new_product field in state.
            # This is so that if the user sets an input, then closes it and opens the drawer
            # again, the user input is reset.
            - id: clear_new_product
              type: SetState
              params:
                new_product: {}

      - id: edit_product_drawer
        type: Drawer
        properties:
          title: Edit Product
          width: 512
        layout:
          contentGutter: 16
        blocks:
          - id: edit_product.name # A text input block to edit the product name.
            type: TextInput
            properties:
              title: Name
              placeholder: Product Name
          - id: edit_product.brand_id # A dropdown selector to select the brand_id of the brand to which this product belongs to.
            type: Selector
            properties:
              title: Brand
              placeholder: Select brand
              options:
                _request: brands_selector # Populate the options of the dropdown using the request we defined earlier.
          - id: edit_product.description
            type: TextArea
            properties:
              title: Description
              placeholder: Product Description
          - id: delete_product_button # Button for deleting the product.
            type: Button
            layout:
              grow: 1
            properties:
              title: Delete
              icon: DeleteOutlined
              type: danger # Set the type of button to a danger button (which is red in color).
              block: true
            events:
              onClick:
                - id: open_delete_modal # Open a confirm modal to verify whether the user wants to delete the product.
                  type: CallMethod
                  params:
                    blockId: delete_modal
                    method: open
          - id: update_product_button
            type: Button
            layout:
              grow: 3 # Make the update button 3 times the width of the delete button in the display css flex row
            properties:
              title: Save
              icon: AiOutlineSave
              block: true
            events:
              onClick:
                - id: update_product # Call the update_product request to save the product changes.
                  type: Request
                  params: update_product
                - id: fetch_all_products # Refresh the all_products request to get the latest product details from the database.
                  type: Request
                  params: all_products
                - id: set_products # Update the product_list array in state so that the page shows the latest product data.
                  type: SetState
                  params:
                    product_list:
                      _request: all_products
                - id: close_drawer # Close the edit_product drawer.
                  type: CallMethod
                  params:
                    blockId: edit_product_drawer
                    method: toggleOpen
          # This is the confirm modal which opens as a user click delete the product being edited.
          - id: delete_modal
            type: ConfirmModal
            properties:
              content: Are you sure you want to delete this product? # The text inside the modal.
              okText: Yes # Change the default text of the ok button to 'Yes'.
              okButton:
                type: danger # Change the default type of the ok button to danger.
              cancelText: No # Change the default text of the cancel button to 'No'.
              status: warning
            # If the confirm modal is accepted.
            events:
              onOk:
                # Call the delete_product request which will delete the edit_product._id item from the dataset.
                # If this is not clear have another look at the delete_product request defined at the top of this page.
                - id: delete_product
                  type: Request
                  params: delete_product
                - id: fetch_all_products # Refresh the all_products request again to the list of products without the newly deleted one.
                  type: Request
                  params: all_products
                - id: set_products # Update the product_list array is state with the response of the newly fetched data.
                  type: SetState
                  params:
                    product_list:
                      _request: all_products
                - id: close_edit_drawer # Close the edit_product drawer.
                  type: CallMethod
                  params:
                    blockId: edit_product_drawer
                    method: toggleOpen
